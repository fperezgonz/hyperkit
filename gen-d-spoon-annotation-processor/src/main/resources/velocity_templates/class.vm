#set($lb="
")
#macro( indent $indentLevel $bodyContent)
    #foreach($bodyLine in $bodyContent.lines().toList())
##      Write indents
        #foreach($level in [1..$indentLevel])    #end
##          Write line
#*        *#$bodyLine#if(!${foreach.last})$lb#end##
    #end
#end
#macro(concatCollection $collection $separator)
    #foreach($element in $collection)#if(!${foreach.first})$separator#end$element#end
#end
package ${ctClass.package};

### Imports
#foreach($import in $imports)
    #set($importQualName = ${import.qualifiedName.toString()})
    #if ($importQualName != "long" && $importQualName != "int"
        && $importQualName != "boolean" && $importQualName != "short"
        && $importQualName != "float" && $importQualName != "double"
        && $importQualName != "byte" && $importQualName != "char"
        && $importQualName != "void"
        && !${importQualName.startsWith("java.lang")} )
import ${importQualName.replace("$", ".")};
    #end
#end

### Class annotations
#set($annotations = $ctClass.annotations)
#foreach($annotation in $annotations)
${annotation}
#end
### Class
public class ${ctClass.simpleName} implements #concatCollection($ctClass.superInterfaces, ", "){

#foreach($field in ${ctClass.fields})
    ##
    #concatCollection($field.modifiers, " ") ${field.type} ${field.simpleName} = Option.none();$lb##
#end

#foreach($constructor in ${ctClass.constructors})
    #indent(1, ${constructor.toString()})$lb##
#end

#foreach($method in ${ctClass.methods})
    #indent(1, ${method.toString()})$lb##
#end

### Builder class
#foreach($type in ${ctClass.nestedTypes})
    #if($type.simpleName=="Builder")
    public static class Builder{

        #foreach($field in ${ctClass.fields})
            #indent(2, ${field.type.toString()}) ${field.simpleName} = Option.none();$lb##
        #end

        public static  Builder newInstance(){
            return new Builder();
        }

##      Builder methods
        #foreach($field in ${ctClass.fields})
        public Builder ${field.simpleName}(final ${field.type} ${field.simpleName}){
            this.${field.simpleName} = ${field.simpleName} == null ? Option.none() : ${field.simpleName};
            return this;
        }

        #end

        public ${ctClass.simpleName} build(){

            ${ctClass.simpleName} instance = new ${ctClass.simpleName}();
        #foreach($field in ${ctClass.fields})
            instance.${field.simpleName} = ${field.simpleName};
        #end

            return instance;

        }

    }
    #end
#end

### Projection class
#foreach($projectionType in ${ctClass.nestedTypes})
    #if($projectionType.simpleName=="Projection")
        #set($annotations = $projectionType.annotations)
        #foreach($annotation in $annotations)
            #indent(1, ${annotation.toString()})$lb##
        #end
        #indent(1, "public static class Projection extends ${projectionType.superclass.simpleName}<${ctClass.simpleName}> {")$lb##
##      Projection fields

        #foreach($field in ${projectionType.fields})
            #indent(2, ${field.toString()})$lb##
        #end

        public Projection() {
        }

##        This writes the methods directly using the spoon printer. Formatting is very limited
##        #foreach($method in ${type.methods})
##            #indent(2, ${method.toString()})$lb##
##        #end

        public void applyProjectionTo(${ctClass.simpleName} dto) throws DtoProjectionException {
        #foreach($field in ${ctClass.fields})
            dto.${field.simpleName} = ProjectionUtils.getProjectedValue(dto.${field.simpleName}, this.${field.simpleName});
        #end
        }

        public Projection(){}

###     Projection Builder class
        public static class Builder{

        #foreach($field in ${projectionType.fields})
            #indent(3, ${field.type.toString()}) ${field.simpleName};$lb##
        #end

            public static  Builder newInstance(){
                return new Builder();
            }

##      Builder methods
        #foreach($field in ${projectionType.fields})
            public Builder ${field.simpleName}(final ${field.type} ${field.simpleName}){
                this.${field.simpleName} = ${field.simpleName};
                return this;
            }

            public Builder ${field.simpleName}(final Presence presence){
                ${field.simpleName} = ${field.type}.of(presence);
                return this;
            }

        #end
            public ${ctClass.simpleName}.${projectionType.simpleName} build(){

                ${ctClass.simpleName}.${projectionType.simpleName} instance = new ${ctClass.simpleName}.${projectionType.simpleName}();
                #foreach($field in ${projectionType.fields})
                instance.${field.simpleName} = ${field.simpleName};
                #end

                return instance;

            }

        }

    }
    #end
#end

### DtoModel class
#foreach($type in ${ctClass.nestedTypes})
    #if($type.simpleName=="DtoModel")
    public static class DtoModel{

    #foreach($field in ${ctClass.fields})
        public static final String _${field.simpleName} = "${field.simpleName}";
    #end

    }
    #end
#end

}