#set($lb="
")
#macro( indent $indentLevel $bodyContent)
    #foreach($bodyLine in $bodyContent.lines().toList())
##      Write indents
        #foreach($level in [1..$indentLevel])    #end
##          Write line
#*        *#$bodyLine#if(!${foreach.last})$lb#end##
    #end
#end
#macro(concatCollection $collection $separator)
    #foreach($element in $collection)#if(!${foreach.first})$separator#end$element#end
#end
package ${ctClass.package};

### Imports
#set($imports = ${ctClass.referencedTypes})
#foreach($import in $imports)
    #set($importQualName = ${import.qualifiedName.toString()})
    #if ($importQualName != "long" && $importQualName != "int"
        && $importQualName != "boolean" && $importQualName != "short"
        && $importQualName != "float" && $importQualName != "double"
        && $importQualName != "byte" && $importQualName != "char"
        && !${importQualName.startsWith("java.lang")} )
import ${importQualName};
    #end
#end

### Class annotations
#set($annotations = $ctClass.annotations)
#foreach($annotation in $annotations)
${annotation}
#end
### Class
class ${ctClass.simpleName} implements#foreach($interface in ${ctClass.superInterfaces})#if(!${foreach.first}),#end $interface#end{

#foreach($field in ${ctClass.fields})
    $field
#end

#foreach($constructor in ${ctClass.constructors})
    #indent(1, ${constructor.toString()})$lb##
#end

#foreach($method in ${ctClass.methods})
    #indent(1, ${method.toString()})$lb##
#end

### Builder class
#foreach($type in ${ctClass.nestedTypes})
    #if($type.simpleName=="Builder")
    ##
        #concatCollection($type.modifiers, " ") class ${type.simpleName}{}
    #end
#end

### Projection class
#foreach($type in ${ctClass.nestedTypes})
    #if($type.simpleName=="Projection")
        #set($annotations = $type.annotations)
        #foreach($annotation in $annotations)
            #indent(1, ${annotation.toString()})$lb##
        #end
    ##
        #concatCollection($type.modifiers, " ") class ${type.simpleName} extends ${type.superclass.simpleName}{}
    #end
#end

}