## Entity class template
package ${packageName};

#foreach($import in $imports)
import ${import};
#end

/**
 * Entity class for the ${tableName} table.
 * Generated by HyperKit Entity Generator.
 */
@Entity
@Table(name = "${tableName}"#if($schema), schema = "${schema}"#end)
public class ${className} {

    // <fields>
    ## Fields
    #foreach($column in $columns)
    #if($column.primaryKey)@Id
    #if($column.autoIncrement)
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    #end
    #end
    #if($column.columnAnnotation)
    ${column.columnAnnotation}
    #end
    private ${column.javaType} ${column.fieldName};
    #end
## Foreign key fields
    #foreach($fk in $foreignKeys)
    #if($fk.relationshipType=="ONE_TO_ONE" && $fk.relationshipOwner)
    @OneToOne
    @Column(name = "$fk.columnName")
    #elseif($fk.relationshipType=="MANY_TO_ONE" && $fk.relationshipOwner)
    @ManyToOne
    @JoinColumn(name = "$fk.columnName")
    #end
    private ${fk.targetClassName} ${fk.fieldName};
    #end

    // </fields>

## Default constructor
    public ${className}() {
    }

    // <getters-setters>
## Getters and setters
    #foreach($column in $columns)
    public ${column.javaType} #if($column.javaType == "boolean")is#{else}get#{end}${column.capitalizedName}() {
        return ${column.fieldName};
    }

    public void set${column.capitalizedName}(${column.javaType} ${column.fieldName}) {
        this.${column.fieldName} = ${column.fieldName};
    }

    #end
## Foreign key getters and setters
    #foreach($fk in $foreignKeys)
    public ${fk.targetClassName} get${fk.targetClassName}() {
        return ${fk.fieldName};
    }

    public void set${fk.targetClassName}(${fk.targetClassName} ${fk.fieldName}) {
        this.${fk.fieldName} = ${fk.fieldName};
    }

    #end
    // </getters-setters>

    public static Builder builder() {
        return new Builder();
    }

    // <builder>
## Builder class
    public static class Builder {

        private ${className} instance = new ${className}();

        public ${className} build() {
            return instance;
        }

        #foreach($column in $columns)
        public Builder ${column.fieldName}(${column.javaType} ${column.fieldName}) {
            instance.${column.fieldName} = ${column.fieldName};
            return this;
        }

        #end
        #foreach($fk in $foreignKeys)
        public Builder ${fk.fieldName.replaceAll("Id$", "")}(${fk.targetClassName} ${fk.fieldName.replaceAll("Id$", "")}) {
            instance.${fk.fieldName.replaceAll("Id$", "")} = ${fk.fieldName.replaceAll("Id$", "")};
            return this;
        }

        #end
    }

    // </builder>

}